import java.io.*;
import java.util.Scanner;

class Maze{
  public int totalRows;
  public int totalCols;
  public Position [][] maze;
  
  //constructor
  public Maze(String fileName){
    fillMaze(readFile(fileName));
  }//Maze
  
  //toString
  public String toString(){
    String s = "";
    for(int i = 0; i < totalRows; i++){
      for(int j = 0; j < totalCols; j++){
        s += maze[i][j];
      }
      s += "\n";
    }//endfor
    return s;
  }//toString
  
  
  //find either Start or Finish Position depending on type supplied
  //when function is called
  public int[] findStartOrFinish(Path sof ){
    int [] startPosition = new int[2];
    
    for(int i = 0; i < totalRows; i++){
      for(int j = 0; j < totalCols; j++){
        if(maze[i][j].pathType == sof){
          startPosition[0] = i;
          startPosition[1] = j;
          i = totalRows; //to break out of top loop as well
          break;
        }//endif
      }//endfor
    }//endfor
    return startPosition;
  }//endStart
  
  
  
  //returns a list of unvisited neighbours to a supplied [row,col]
  //point in the maze array that can be visited
  public Position[] validNeighbours(int row, int col){
    //using four because thats max amount of neighbours in a 2d array.
    //could have used arrayList or Linked list but not worth the stress
    Position [] validNeighbours = new Position[4];
    int count = 0;
    
    if(col < (totalCols - 1)){
      System.out.println("Checking for right neighbour...");
      if(maze[row][col+1].canBeVisited()){
        System.out.println("right neighbour found...");
        validNeighbours[count++] = maze[row][col+1];
      }
    }//endif
    
    if(col > 0){
      System.out.println("Checking for left neighbour...");
      if(maze[row][col-1].canBeVisited()){
        System.out.println("left neighbour found...");
        validNeighbours[count++] = maze[row][col-1];
      }
    }//endif
    
    if(row > 0){
      System.out.println("Checking for top neighbour...");
      if(maze[row-1][col].canBeVisited()){
        System.out.println("top neighbour found...");
        validNeighbours[count++] = maze[row-1][col];
      }
    }//endif
    
    if(row < (totalRows - 1)){
      System.out.println("Checking for bottom neighbour...");
      if(maze[row+1][col].canBeVisited()){
        System.out.println("bottom neighbour found...");
        validNeighbours[count++] = maze[row+1][col];
      }
    }//endif
    return validNeighbours;
  }//validNeighbours
  
  //find a path through the maze using a stack
  public Position stackSearch(){
    int[] startIndex = findStartOrFinish(Path.START);
    Position mazeStart = maze[startIndex[0]][startIndex[1]];
    Stack mazeStack = new Stack();
    
    mazeStack.push(mazeStart);
    mazeStart.visited = true;
    
    Position current = null;
    Position [] validNeighbour;
    int currentNeighbour;
    while(!mazeStack.isEmpty()){
      current = mazeStack.pop();
      
      
      if(current.pathType == Path.FINISH){
        break;
      }//if
      
      validNeighbour = validNeighbours(current.row, current.col);
      currentNeighbour = 0;
      while(validNeighbour[currentNeighbour] != null){
        if(validNeighbour[currentNeighbour].visited == false){
          validNeighbour[currentNeighbour].visited = true;
          validNeighbour[currentNeighbour].visitedFrom = current;
          mazeStack.push(validNeighbour[currentNeighbour]);
        }
        currentNeighbour++;
      }
    }//while
    return current;
  }//stackMaze
  
  
  
  //find a path through the maze using a stack
  public Position queueSearch(){
    int[] startIndex = findStartOrFinish(Path.START);
    Position mazeStart = maze[startIndex[0]][startIndex[1]];
    Queue mazeQueue = new Queue();
    
    mazeQueue.enqueue(mazeStart);
    mazeStart.visited = true;
    
    Position current = null;
    Position [] validNeighbour;
    int currentNeighbour;
    
    boolean queueMT = mazeQueue.isEmpty();
    while(!mazeQueue.isEmpty()){
      queueMT = mazeQueue.isEmpty();
      current = mazeQueue.dequeue();
      
      
      if(current.pathType == Path.FINISH){
        break;
      }//if
      
      validNeighbour = validNeighbours(current.row, current.col);
      currentNeighbour = 0;
      while(validNeighbour[currentNeighbour] != null){
        if(validNeighbour[currentNeighbour].visited == false){
          validNeighbour[currentNeighbour].visited = true;
          validNeighbour[currentNeighbour].visitedFrom = current;
          mazeQueue.enqueue(validNeighbour[currentNeighbour]);
        }
        currentNeighbour++;
      }
    }//while
    return current;
  }//queueSearch
  /***************************HELPER METHODS***********************/
  private Scanner readFile(String fileName){
    Scanner sc = null;
    
    try{
      File mazeFile = new File(fileName);
      sc = new Scanner(mazeFile);
    }//try
    catch(IOException e){
      System.out.println("Error reading file: " + e.getMessage());
    }//catch
    
    return sc;
  }//readFile
  
  private void fillMaze(Scanner sc){
    totalRows = sc.nextInt();
      totalCols = sc.nextInt();
      
      String s = "";
      
      maze = new Position[totalRows][totalCols];
      
      //fill maze
      s = sc.nextLine(); //mysterious length 0 line between first line and second line 
      for(int i = 0; i < totalRows; i++){
        s = sc.nextLine();
        for(int j = 0; j < totalCols; j++){
          switch(s.charAt(j)){
            case 'S':
              maze[i][j] = new Position(i,j,Path.START);
              break;
            case 'F':
              maze[i][j] = new Position(i,j,Path.FINISH);
              break;
            case '.':
              maze[i][j] = new Position(i,j,Path.PATH);
              break;
            default:
              maze[i][j] = new Position(i,j,Path.WALL);
              break;
          }//switch
        }//endfor
      }//endfor
//    try{
//      
//      
//    }//try
//    catch(Exception e){
//      System.out.println("Error building maze from file: " + e.getMessage());
//    }//catch
  }//fillMaze
  
}//Maze